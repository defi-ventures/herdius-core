// Code generated by MockGen. DO NOT EDIT.
// Source: aws/aws.go

// Package aws_mocks is a generated GoMock package.
package aws_mocks

import (
	reflect "reflect"

	s3 "github.com/aws/aws-sdk-go/service/s3"
	s3manager "github.com/aws/aws-sdk-go/service/s3/s3manager"
	gomock "github.com/golang/mock/gomock"
	protobuf "github.com/herdius/herdius-core/blockchain/protobuf"
)

// MockBackuperI is a mock of BackuperI interface
type MockBackuperI struct {
	ctrl     *gomock.Controller
	recorder *MockBackuperIMockRecorder
}

// MockBackuperIMockRecorder is the mock recorder for MockBackuperI
type MockBackuperIMockRecorder struct {
	mock *MockBackuperI
}

// NewMockBackuperI creates a new mock instance
func NewMockBackuperI(ctrl *gomock.Controller) *MockBackuperI {
	mock := &MockBackuperI{ctrl: ctrl}
	mock.recorder = &MockBackuperIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBackuperI) EXPECT() *MockBackuperIMockRecorder {
	return m.recorder
}

// TryBackupBaseBlock mocks base method
func (m *MockBackuperI) TryBackupBaseBlock(arg0, arg1 *protobuf.BaseBlock) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TryBackupBaseBlock", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TryBackupBaseBlock indicates an expected call of TryBackupBaseBlock
func (mr *MockBackuperIMockRecorder) TryBackupBaseBlock(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TryBackupBaseBlock", reflect.TypeOf((*MockBackuperI)(nil).TryBackupBaseBlock), arg0, arg1)
}

// BackupNeededBaseBlocks mocks base method
func (m *MockBackuperI) BackupNeededBaseBlocks(arg0 string, arg1 *protobuf.BaseBlock) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BackupNeededBaseBlocks", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// BackupNeededBaseBlocks indicates an expected call of BackupNeededBaseBlocks
func (mr *MockBackuperIMockRecorder) BackupNeededBaseBlocks(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BackupNeededBaseBlocks", reflect.TypeOf((*MockBackuperI)(nil).BackupNeededBaseBlocks), arg0, arg1)
}

// backupToS3 mocks base method
func (m *MockBackuperI) backupToS3(arg0 *s3manager.Uploader, arg1 *protobuf.BaseBlock) (*s3manager.UploadOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "backupToS3", arg0, arg1)
	ret0, _ := ret[0].(*s3manager.UploadOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// backupToS3 indicates an expected call of backupToS3
func (mr *MockBackuperIMockRecorder) backupToS3(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "backupToS3", reflect.TypeOf((*MockBackuperI)(nil).backupToS3), arg0, arg1)
}

// findInS3 mocks base method
func (m *MockBackuperI) findInS3(arg0 *s3.S3, arg1 *protobuf.BaseBlock) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "findInS3", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// findInS3 indicates an expected call of findInS3
func (mr *MockBackuperIMockRecorder) findInS3(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "findInS3", reflect.TypeOf((*MockBackuperI)(nil).findInS3), arg0, arg1)
}
